class ValueTypeAddress
{
	private static void CallMethodOnValueTypeLocal()
	{
		int i = 42;
		System.Console.WriteLine(i.ToString());
	}
	
	private static void MultipleMethodCallsOnLocalValueType()
	{
		int i = 42;
		System.Console.WriteLine(i.ToString());
		System.Console.WriteLine(i.ToString());
	}

	private static void CallMethodOnLiteralValueType()
	{
		System.Console.WriteLine(42.ToString());
	}

	private static void CallMethodOnValueTypeReturn()
	{
		System.Console.WriteLine(Value().ToString());
	}

	private static void CallMethodOnValueTypeNewExpression()
	{
		System.Console.WriteLine(new System.Int32().ToString());
	}

	private static void CallMethodOnCustomValueTypeNewExpression()
	{
		System.Console.WriteLine(new MyValueType("x").Value());
	}

	private static void CallMethodOnCustomValueTypePointer()
	{
		/*
		unsafe
		{
			NOT SUPPORTED IN ROSLYN YET (AS OF 16/05/2012)

			int i = 42;
			int *pi = &i;

			
			System.Console.WriteLine((*pi).ToString());
		}
			*/
	}

	private static int Value()
	{
		return 0;
	}

	private struct MyValueType
	{
		public MyValueType(string s)
		{
		}

		public string Value()
		{
			return "";
		}
	}
}